/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assgui;

import java.awt.Component;
import java.sql.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ARSH KUMAR
 */
public class AgentPerf extends javax.swing.JFrame {

    /**
     * Creates new form AgentPerf
     */
    public AgentPerf() {
        initComponents();
    }

    not_found notFound = new not_found();
    NoSale noSale = new NoSale();
    NoRent noRent = new NoRent();
    YearError yearError = new YearError();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        agent_sellin_most_properties = new javax.swing.JButton();
        agent_renting_most_properties = new javax.swing.JButton();
        agent_worth_sold = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        agent_idtf = new javax.swing.JTextField();
        agent_worth_rented = new javax.swing.JButton();
        agentDetails = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        report_rent = new javax.swing.JButton();
        allTime_rb = new javax.swing.JRadioButton();
        timePeriod_rb = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        year1_tf = new javax.swing.JTextField();
        year2_tf = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        report_sale = new javax.swing.JButton();
        byWorth_rb = new javax.swing.JRadioButton();
        byCount_rb = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 24)); // NOI18N
        jLabel1.setText("Performance REPORT");

        agent_sellin_most_properties.setText("Agent Selling Most Properties");
        agent_sellin_most_properties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agent_sellin_most_propertiesActionPerformed(evt);
            }
        });

        agent_renting_most_properties.setText("Agent Renting Most Properties");
        agent_renting_most_properties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agent_renting_most_propertiesActionPerformed(evt);
            }
        });

        agent_worth_sold.setText("Worth of total Properties Sold");
        agent_worth_sold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agent_worth_soldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        jLabel2.setText("Specific Details of Agents:");

        jLabel3.setText("Agent ID:");

        agent_worth_rented.setText("Accumaltive rent on properties rented");
        agent_worth_rented.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agent_worth_rentedActionPerformed(evt);
            }
        });

        agentDetails.setText("Agent Details");
        agentDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agentDetailsActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(resultTable);

        report_rent.setText("Report on Rent");
        report_rent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report_rentActionPerformed(evt);
            }
        });

        buttonGroup1.add(allTime_rb);
        allTime_rb.setText("All Time Report");
        allTime_rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allTime_rbActionPerformed(evt);
            }
        });

        buttonGroup1.add(timePeriod_rb);
        timePeriod_rb.setText("Over a specific time period");
        timePeriod_rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timePeriod_rbActionPerformed(evt);
            }
        });

        jLabel6.setText("Time Range");

        jLabel4.setText("-");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(year1_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(year2_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(year1_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year2_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        report_sale.setText("Report On Sales");
        report_sale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report_saleActionPerformed(evt);
            }
        });

        buttonGroup2.add(byWorth_rb);
        byWorth_rb.setText("By Worth");

        buttonGroup2.add(byCount_rb);
        byCount_rb.setText("By Count");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(agent_idtf))
                                .addComponent(agent_worth_sold, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(agent_worth_rented, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(agentDetails, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(allTime_rb)
                                    .addComponent(byWorth_rb))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(timePeriod_rb)
                                    .addComponent(byCount_rb)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(agent_sellin_most_properties, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(agent_renting_most_properties, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(report_rent)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(report_sale))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(776, 776, 776)
                .addComponent(jLabel1)
                .addContainerGap(777, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(byWorth_rb)
                    .addComponent(byCount_rb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allTime_rb)
                    .addComponent(timePeriod_rb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agent_sellin_most_properties, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(agent_renting_most_properties, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(report_sale, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(report_rent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(agent_idtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(agent_worth_sold, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(agent_worth_rented, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(agentDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        allTime_rb.setSelected(true);
        Component[] com = jPanel1.getComponents();
        for (Component com1 : com) {
            com1.setEnabled(false);
        }
        byWorth_rb.setSelected(true);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agent_sellin_most_propertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agent_sellin_most_propertiesActionPerformed
        // TODO add your handling code here:
        int year1, year2;
        try {
            Connection conn = ConnectDatabase.getConnection();
            DefaultTableModel tableModel = new DefaultTableModel();
            Statement stmt = conn.createStatement();
            String sql = "";
            if (allTime_rb.isSelected() == true) {
                if (byWorth_rb.isSelected() == true) {
                    sql += "select a_id as Agent_ID, a_name as Agent, sum(price_or_rent_pm) as Total_Sale, count(*) as 'Number of Properties Sold' from agent natural join (estate natural join estate_details) where sale_or_rent=\"sale\" and year(date_sold_or_rented) and available=False group by a_id order by Total_Sale desc limit 1;";
                } else {
                    sql += "select a_id as Agent_ID, a_name as Agent, sum(price_or_rent_pm) as Total_Sale, count(*) as Number_of_Properties_Sold from agent natural join (estate natural join estate_details) where sale_or_rent=\"sale\" and year(date_sold_or_rented) and available=False group by a_id order by Number_of_Properties_Sold desc limit 1;";
                }
            } else if (timePeriod_rb.isSelected() == true) {
                year1 = Integer.parseInt(year1_tf.getText());
                year2 = Integer.parseInt(year2_tf.getText());
                if (year1 > year2) {
                    yearError.setVisible(true);
                    yearError.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                }
                if (byWorth_rb.isSelected() == true) {
                    sql += "select a_id as Agent_ID, a_name as Agent, sum(price_or_rent_pm) as Total_Sale, count(*) as 'Number of Properties Sold' from agent natural join (estate natural join estate_details) where sale_or_rent=\"sale\" and year(date_sold_or_rented) between " + year1 + " and " + year2 + " and available=False group by a_id order by Total_Sale desc limit 1;";
                } else {
                    sql += "select a_id as Agent_ID, a_name as Agent, sum(price_or_rent_pm) as Total_Sale, count(*) as Number_of_Properties_Sold from agent natural join (estate natural join estate_details) where sale_or_rent=\"sale\" and year(date_sold_or_rented) between " + year1 + " and " + year2 + " and available=False group by a_id order by Number_of_Properties_Sold desc limit 1;";
                }
            }
            ResultSet rs = stmt.executeQuery(sql);
            ResultSetMetaData metaData = rs.getMetaData();
            //System.out.print(rsmt);
            int columnCount = metaData.getColumnCount();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                tableModel.addColumn(metaData.getColumnLabel(columnIndex));
            }
            Object[] row = new Object[columnCount];
            while (rs.next()) {
                for (int i = 0; i < columnCount; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                //Now add row to table model with that array of objects as an argument
                tableModel.addRow(row);
            }
            resultTable.setModel(tableModel);
        } catch (Exception e) {
            yearError.setVisible(true);
            yearError.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            //e.printStackTrace();
        }
    }//GEN-LAST:event_agent_sellin_most_propertiesActionPerformed

    private void allTime_rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allTime_rbActionPerformed
        // TODO add your handling code here:
        Component[] com = jPanel1.getComponents();
        for (Component com1 : com) {
            com1.setEnabled(false);
        }
    }//GEN-LAST:event_allTime_rbActionPerformed

    private void timePeriod_rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timePeriod_rbActionPerformed
        // TODO add your handling code here:
        Component[] com = jPanel1.getComponents();
        for (Component com1 : com) {
            com1.setEnabled(true);
        }
    }//GEN-LAST:event_timePeriod_rbActionPerformed

    private void agent_renting_most_propertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agent_renting_most_propertiesActionPerformed
        // TODO add your handling code here:
        int year1, year2;
        try {
            Connection conn = ConnectDatabase.getConnection();
            DefaultTableModel tableModel = new DefaultTableModel();
            Statement stmt = conn.createStatement();
            String sql = "";
            if (allTime_rb.isSelected() == true) {
                if (byWorth_rb.isSelected() == true) {
                    sql += "select a_id as Agent_ID, a_name as Agent, sum(price_or_rent_pm) as Total_Rent, count(*) as 'Number of Properties Rented' from agent natural join (estate natural join estate_details) where sale_or_rent=\"rent\" and year(date_sold_or_rented) and available=False group by a_id order by Total_Rent desc limit 1;";
                } else {
                    sql += "select a_id as Agent_ID, a_name as Agent, sum(price_or_rent_pm) as Total_Rent, count(*) as Number_of_Properties_Rented from agent natural join (estate natural join estate_details) where sale_or_rent=\"rent\" and year(date_sold_or_rented) and available=False group by a_id order by Number_of_Properties_Rented desc limit 1;";
                }
            } else if (timePeriod_rb.isSelected() == true) {
                year1 = Integer.parseInt(year1_tf.getText());
                year2 = Integer.parseInt(year2_tf.getText());
                if (year1 > year2) {
                    yearError.setVisible(true);
                    yearError.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                }
                if (byWorth_rb.isSelected() == true) {
                    sql += "select a_id as Agent_ID, a_name as Agent, sum(price_or_rent_pm) as Total_Rent, count(*) as 'Number of Properties Rented' from agent natural join (estate natural join estate_details) where sale_or_rent=\"rent\" and year(date_sold_or_rented) between " + year1 + " and " + year2 + " and available=False group by a_id order by Total_Rent desc limit 1;";
                } else {
                    sql += "select a_id as Agent_ID, a_name as Agent, sum(price_or_rent_pm) as Total_Rent, count(*) as Number_of_Properties_Rented from agent natural join (estate natural join estate_details) where sale_or_rent=\"rent\" and year(date_sold_or_rented) between " + year1 + " and " + year2 + " and available=False group by a_id order by Number_of_Properties_Rented desc limit 1;";
                }
            }
            ResultSet rs = stmt.executeQuery(sql);
            ResultSetMetaData metaData = rs.getMetaData();
            //System.out.print(rsmt);
            int columnCount = metaData.getColumnCount();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                tableModel.addColumn(metaData.getColumnLabel(columnIndex));
            }
            Object[] row = new Object[columnCount];
            while (rs.next()) {
                for (int i = 0; i < columnCount; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                //Now add row to table model with that array of objects as an argument
                tableModel.addRow(row);
            }
            resultTable.setModel(tableModel);
        } catch (Exception e) {
            yearError.setVisible(true);
            yearError.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            //e.printStackTrace();
        }
    }//GEN-LAST:event_agent_renting_most_propertiesActionPerformed

    private void report_rentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report_rentActionPerformed
        // TODO add your handling code here:
        int year1, year2;
        try {
            Connection conn = ConnectDatabase.getConnection();
            DefaultTableModel tableModel = new DefaultTableModel();
            Statement stmt = conn.createStatement();
            String sql = "";
            if (allTime_rb.isSelected() == true) {
                sql += " select a_id as 'Agent ID', a_name as Agent, sum(price_or_rent_pm) as total, count(a_id) as 'Number of properties Rented' from agent natural join (estate natural join estate_details) where sale_or_rent=\"rent\" and available=False group by a_id order by ";
                if (byWorth_rb.isSelected()) {
                    sql += "sum(price_or_rent_pm) desc;";
                } else {
                    sql += "count(a_id) desc;";
                }
            } else if (timePeriod_rb.isSelected() == true) {
                year1 = Integer.parseInt(year1_tf.getText());
                year2 = Integer.parseInt(year2_tf.getText());
                if (year1 > year2) {
                    yearError.setVisible(true);
                    yearError.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                }
                sql += " select a_id as 'Agent ID', a_name as Agent, sum(price_or_rent_pm) as total, count(a_id) as 'Number of properties Rented' from agent natural join (estate natural join estate_details) where sale_or_rent=\"rent\" and year(date_sold_or_rented) between " + year1 + " and " + year2 + " and available=False group by a_id order by ";
                if (byWorth_rb.isSelected()) {
                    sql += "sum(price_or_rent_pm) desc;";
                } else {
                    sql += "count(a_id) desc;";
                }
            }
            ResultSet rs = stmt.executeQuery(sql);
            ResultSetMetaData metaData = rs.getMetaData();
            //System.out.print(rsmt);
            int columnCount = metaData.getColumnCount();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                tableModel.addColumn(metaData.getColumnLabel(columnIndex));
            }
            Object[] row = new Object[columnCount];
            while (rs.next()) {
                for (int i = 0; i < columnCount; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                //Now add row to table model with that array of objects as an argument
                tableModel.addRow(row);
            }
            resultTable.setModel(tableModel);
        } catch (Exception e) {
            yearError.setVisible(true);
            yearError.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            //e.printStackTrace();
        }
    }//GEN-LAST:event_report_rentActionPerformed

    private void report_saleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report_saleActionPerformed
        // TODO add your handling code here:
        int year1, year2;
        try {
            Connection conn = ConnectDatabase.getConnection();
            DefaultTableModel tableModel = new DefaultTableModel();
            Statement stmt = conn.createStatement();
            String sql = "";
            if (allTime_rb.isSelected() == true) {
                sql += " select a_id as 'Agent ID', a_name as Agent, sum(price_or_rent_pm) as total, count(a_id) as 'Number of properties Sold' from agent natural join (estate natural join estate_details) where sale_or_rent=\"sale\" and available=False group by a_id order by ";
                if (byWorth_rb.isSelected()) {
                    sql += "sum(price_or_rent_pm) desc,count(a_id) desc;";
                } else {
                    sql += "count(a_id) desc,sum(price_or_rent_pm) desc;";
                }
            } else if (timePeriod_rb.isSelected() == true) {
                year1 = Integer.parseInt(year1_tf.getText());
                year2 = Integer.parseInt(year2_tf.getText());
                if (year1 > year2) {
                    yearError.setVisible(true);
                    yearError.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                }
                sql += " select a_id as 'Agent ID', a_name as Agent, sum(price_or_rent_pm) as total, count(a_id) as 'Number of properties Sold' from agent natural join (estate natural join estate_details) where sale_or_rent=\"sale\" and year(date_sold_or_rented) between " + year1 + " and " + year2 + " and available=False group by a_id order by ";
                if (byWorth_rb.isSelected()) {
                    sql += "sum(price_or_rent_pm) desc,count(a_id) desc;";
                } else {
                    sql += "count(a_id) desc,sum(price_or_rent_pm) desc;";
                }
            }
            ResultSet rs = stmt.executeQuery(sql);
            ResultSetMetaData metaData = rs.getMetaData();
            //System.out.print(rsmt);
            int columnCount = metaData.getColumnCount();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                tableModel.addColumn(metaData.getColumnLabel(columnIndex));
            }
            Object[] row = new Object[columnCount];
            while (rs.next()) {
                for (int i = 0; i < columnCount; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                //Now add row to table model with that array of objects as an argument
                tableModel.addRow(row);
            }
            resultTable.setModel(tableModel);
        } catch (Exception e) {
            yearError.setVisible(true);
            yearError.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            //e.printStackTrace();
        }
    }//GEN-LAST:event_report_saleActionPerformed

    private void agent_worth_soldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agent_worth_soldActionPerformed
        // TODO add your handling code here:
        int year1, year2;
        try {
            int agentId = Integer.parseInt(agent_idtf.getText());
            Connection conn = ConnectDatabase.getConnection();
            DefaultTableModel tableModel = new DefaultTableModel();
            Statement stmt = conn.createStatement();
            String sql = "";
            String check = "select * from agent where a_id = " + agentId + " ;";
            ResultSet rs_check = stmt.executeQuery(check);
            int flag = 0;
            if (!rs_check.isBeforeFirst()) {
                notFound.setVisible(true);
                notFound.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                flag = 1;
            }
            if (flag == 0) {
                if (allTime_rb.isSelected() == true) {
                    sql += " select a_id as 'Agent ID', a_name as Agent, sum(price_or_rent_pm) as total, count(a_id) as 'Number of properties Sold' from agent natural join (estate natural join estate_details) where sale_or_rent=\"sale\" and available=False and a_id = " + agentId + " group by a_id;";
                } else if (timePeriod_rb.isSelected() == true) {
                    year1 = Integer.parseInt(year1_tf.getText());
                    year2 = Integer.parseInt(year2_tf.getText());
                    if (year1 > year2) {
                        yearError.setVisible(true);
                        yearError.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    }
                    sql += " select a_id as 'Agent ID', a_name as Agent, sum(price_or_rent_pm) as total, count(a_id) as 'Number of properties Sold' from agent natural join (estate natural join estate_details) where sale_or_rent=\"sale\" and year(date_sold_or_rented) between " + year1 + " and " + year2 + " and available=False and agent.a_id = " + agentId + " group by a_id;";
                }
                ResultSet rs = stmt.executeQuery(sql);
                if (!rs.isBeforeFirst()) {
                    noSale.setVisible(true);
                    noSale.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                } else {
                    ResultSetMetaData metaData = rs.getMetaData();
                    //System.out.print(rsmt);
                    int columnCount = metaData.getColumnCount();
                    for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                        tableModel.addColumn(metaData.getColumnLabel(columnIndex));
                    }
                    Object[] row = new Object[columnCount];
                    while (rs.next()) {
                        for (int i = 0; i < columnCount; i++) {
                            row[i] = rs.getObject(i + 1);
                        }
                        //Now add row to table model with that array of objects as an argument
                        tableModel.addRow(row);
                    }
                    resultTable.setModel(tableModel);
                }
            }

        } catch (Exception e) {
            if (year1_tf.getText() == "" || year2_tf.getText() == "") {
                yearError.setVisible(true);
                yearError.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            } else {
                notFound.setVisible(true);
                notFound.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            }
            //   e.printStackTrace();
        }
    }//GEN-LAST:event_agent_worth_soldActionPerformed

    private void agent_worth_rentedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agent_worth_rentedActionPerformed
        // TODO add your handling code here: 
        int year1, year2;
        try {
            int agentId = Integer.parseInt(agent_idtf.getText());
            Connection conn = ConnectDatabase.getConnection();
            DefaultTableModel tableModel = new DefaultTableModel();
            Statement stmt = conn.createStatement();
            String sql = "";
            String check = "select * from agent where a_id = " + agentId + " ;";
            ResultSet rs_check = stmt.executeQuery(check);
            int flag = 0;
            if (!rs_check.isBeforeFirst()) {
                notFound.setVisible(true);
                notFound.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                flag = 1;
            }
            if (flag == 0) {
                if (allTime_rb.isSelected() == true) {
                    sql += " select a_id as 'Agent ID', a_name as Agent, sum(price_or_rent_pm) as total, count(a_id) as 'Number of properties Rented' from agent natural join (estate natural join estate_details) where sale_or_rent=\"rent\" and available=False and a_id = " + agentId + " group by a_id;";
                } else if (timePeriod_rb.isSelected() == true) {
                    year1 = Integer.parseInt(year1_tf.getText());
                    year2 = Integer.parseInt(year2_tf.getText());
                    if (year1 > year2) {
                        yearError.setVisible(true);
                        yearError.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    }
                    sql += " select a_id as 'Agent ID', a_name as Agent, sum(price_or_rent_pm) as total, count(a_id) as 'Number of properties Rented' from agent natural join (estate natural join estate_details) where sale_or_rent=\"rent\" and year(date_sold_or_rented) between " + year1 + " and " + year2 + " and available=False and agent.a_id = " + agentId + " group by a_id;";
                }
                ResultSet rs = stmt.executeQuery(sql);
                if (!rs.isBeforeFirst()) {
                    noRent.setVisible(true);
                    noRent.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                } else {
                    ResultSetMetaData metaData = rs.getMetaData();
                    //System.out.print(rsmt);
                    int columnCount = metaData.getColumnCount();
                    for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                        tableModel.addColumn(metaData.getColumnLabel(columnIndex));
                    }
                    Object[] row = new Object[columnCount];
                    while (rs.next()) {
                        for (int i = 0; i < columnCount; i++) {
                            row[i] = rs.getObject(i + 1);
                        }
                        //Now add row to table model with that array of objects as an argument
                        tableModel.addRow(row);
                    }
                    resultTable.setModel(tableModel);
                }
            }
        } catch (Exception e) {
            if (year1_tf.getText() == "`" || year2_tf.getText() == " ") {
                yearError.setVisible(true);
                yearError.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            } else {
                notFound.setVisible(true);
                notFound.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            }
            //e.printStackTrace();
        }
    }//GEN-LAST:event_agent_worth_rentedActionPerformed

    private void agentDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agentDetailsActionPerformed
        // TODO add your handling code here:
        try {
            int agentId = Integer.parseInt(agent_idtf.getText());
            int flag = 1;
            Connection conn = ConnectDatabase.getConnection();
            DefaultTableModel tableModel = new DefaultTableModel();
            Statement stmt = conn.createStatement();
            String sql = "";
            sql += " select estate_id as 'Estate ID', date_listed as 'Listing date', date_sold_or_rented as 'Date Sold or Rented', sale_or_rent as Sale_or_Rent,available as Availability, concat(city,', ',state) as Address, price_or_rent_pm as 'Amount (in Rs.)', o_id as Owner_ID, o_phone as 'Owners Phone Number', o_email as 'Owners Email ID' from agent natural join estate natural join owners where a_id = " + agentId + ";";
            String checkAid = "select count(*) from agent where a_id="+agentId+";";
            ResultSet rs = stmt.executeQuery(checkAid);
            if(rs.next()){
                if(rs.getInt(1) == 0)
                    flag = 0;
                System.out.println("line 1");
            }
            if(flag == 1){
                rs = stmt.executeQuery(sql);
                
                    ResultSetMetaData metaData = rs.getMetaData();
                    //System.out.print(rsmt);
                    int columnCount = metaData.getColumnCount();
                    for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                        tableModel.addColumn(metaData.getColumnLabel(columnIndex));
                    }
                    Object[] row = new Object[columnCount];
                    while (rs.next()) {
                        for (int i = 0; i < columnCount; i++) {
                            row[i] = rs.getObject(i + 1);
                        }
                        //Now add row to table model with that array of objects as an argument
                        tableModel.addRow(row);
                    }
                    resultTable.setModel(tableModel);
                
            }
            else{
                notFound.setVisible(true);
                notFound.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_agentDetailsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgentPerf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgentPerf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgentPerf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgentPerf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgentPerf().setVisible(true);
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agentDetails;
    private javax.swing.JTextField agent_idtf;
    private javax.swing.JButton agent_renting_most_properties;
    private javax.swing.JButton agent_sellin_most_properties;
    private javax.swing.JButton agent_worth_rented;
    private javax.swing.JButton agent_worth_sold;
    private javax.swing.JRadioButton allTime_rb;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton byCount_rb;
    private javax.swing.JRadioButton byWorth_rb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton report_rent;
    private javax.swing.JButton report_sale;
    private javax.swing.JTable resultTable;
    private javax.swing.JRadioButton timePeriod_rb;
    private javax.swing.JTextField year1_tf;
    private javax.swing.JTextField year2_tf;
    // End of variables declaration//GEN-END:variables
}
